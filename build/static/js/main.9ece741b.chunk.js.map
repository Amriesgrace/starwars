{"version":3,"sources":["Logo.png","Components/Planets/Planets.js","Components/People/People.js","Components/Starships/Starships.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","planets","props","react_default","a","createElement","className","name","temp","pop","diameter","gravity","orbit","rotate","surface","terrain","people","gender","dob","eye","hair","weight","skin","ride","starships","model","capacity","mglt","price","maker","passengers","rating","class","consume","crew","speed","App","state","error","_this2","this","axios","get","then","res","setState","data","results","catch","err","map","planet","Planets_Planets","key","id","climate","population","rotation_period","surface_water","person","People_People","birth_year","eye_color","height","hair_color","skin_color","vehicles","length","ships","Starships","manufacturer","starship_class","cargo_capacity","cost_in_credits","consumables","hyperdrive_rating","max_atmosphering_speed","href","src","Logo","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Tabs","defaultActiveKey","fill","variant","transition","Tab","eventKey","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ece741b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.1faad84b.png\";","import React from 'react';\nimport './Planets.scss';\n\n\nconst planets = (props)  => {\n    \n    return(\n        <div className=\"Planets\">\n                <div className=\"col-md-3 col-lg-3 mb-3\">\n                    <div className=\"planet-card\">\n                       <div className=\"planet-card-inner\">\n                            <div className=\"planet-front\">\n                                <div className=\"card-body\">\n                                    <h4 className=\"card-title\">{props.name}</h4>\n                                    <p className=\"card-text\">\n                                        <strong>{props.name} Climate: </strong> \n                                        <span className=\"text-capitalize\">{props.temp}\n                                        </span>\n                                    </p>\n                                    <p className=\"card-text\">{props.pop}</p>\n                                </div>\n                            </div>\n                            <div className=\"planet-back\">\n                                <h1 className=\"text-center\">{props.name}</h1> \n                                <p className='mb-1'>Temperature: {props.temp}</p> \n                                <p className='mb-1'>diameter: {props.diameter}</p>\n                                <p className='mb-1'>Gravity: {props.gravity}</p>\n                                <p className='mb-1'>Orbital Period{props.orbit}</p>\n                                <p className='mb-1'>population: {props.pop}</p>\n                                <p className='mb-1'>Rotation Period: {props.rotate}</p>\n                                <p className='mb-1'>Surface Water: {props.surface}</p>\n                                <p className='mb-1'>terrain: {props.terrain}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div> \n    );\n}\n\nexport default planets;","import React from 'react';\nimport './People.css';\n\nconst people = (props) => {\n    return (\n        <div className=\"people\">\n            <div className=\"col-md-3 col-lg-3 mb-3\">\n                    <div className=\"planet-card\">\n                       <div className=\"planet-card-inner\">\n                            <div className=\"planet-front\">\n                                <div className=\"card-body\">\n                                    <h4 className=\"card-title\">{props.name}</h4>\n                                    <p className=\"card-text\">\n                                        <span className=\"text-capitalize\">{props.gender}\n                                        </span>\n                                    </p>\n                                    <p className=\"card-text\">{props.dob}</p>\n                                </div>\n                            </div>\n                            <div className=\"planet-back\">\n                                <h1 className=\"text-center\">{props.name}</h1> \n                                <p className='mb-1'>Gender: {props.gender}</p> \n                                <p className='mb-1'>date of Birth: {props.dob}</p>\n                                <p className='mb-1'>Eye Color: {props.eye}</p>\n                                <p className='mb-1'>Hair Color{props.hair}</p>\n                                <p className='mb-1'>Weight: {props.weight}</p>\n                                <p className='mb-1'>Skin Color: {props.skin}</p>\n                                <p className='mb-1'> Number of Rides {props.ride}</p>\n                                <p className='mb-1'>terrin: {props.terrain}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n        </div>\n    )\n};\n\nexport default people;","import React from 'react';\n\nconst starships = (props) => {\n    return (\n        <div className=\"Starship\">\n            <div className=\"col-md-3 col-lg-3 mb-3\">\n                <div className=\"planet-card\">\n                    <div className=\"planet-card-inner\">\n                        <div className=\"planet-front\">\n                            <div className=\"card-body\">\n                                <h4 className=\"card-title\">{props.name}</h4>\n                                <p className=\"card-text\">\n                                    <span className=\"text-capitalize\">{props.model}\n                                    </span>\n                                </p>\n                                <p className=\"card-text\">{props.capacity}</p>\n                            </div>\n                        </div>\n\n                        <div className=\"planet-back\">\n                            <h1 className=\"text-center\">{props.name}</h1>\n                            <p className='mb-1'>Model: {props.model}</p>\n                            <p className='mb-1'>MGLT: {props.mglt} /hr  </p>\n                            <p className='mb-1'>Capacity: {props.capacity}</p> \n                            <p className='mb-1'>Price: {props.price} credits</p>\n                            <p className='mb-1'>Manufacturer: {props.maker}</p>\n                            <p className='mb-1'>Passengers: {props.passengers}</p>\n                            <p className='mb-1'>drive rating: {props.rating}</p>\n                            <p className='mb-1'>Class: {props.class}</p>\n                            <p className='mb-1'>Consumables: {props.consume}</p>\n                            <p className='mb-1'>Crew: {props.crew}</p>\n                            <p className='mb-1'>Atmosphering Speed{props.speed}</p>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default starships;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {Tabs, Tab} from 'react-bootstrap';\n\nimport Planets from './Components/Planets/Planets';\nimport People from './Components/People/People';\nimport Starship from './Components/Starships/Starships';\nimport './App.css';\nimport Logo from './Logo.png';\n\nclass App extends Component {\n    state= {\n        planets:[],\n        people:[],\n        starships:[],\n        error:false\n    }\n    componentDidMount(){\n        const url = 'https://swapi.co/api/planets/?format=json';\n        const peopleUrl = 'https://swapi.co/api/people/?format=json';\n        const starshipUrl = 'https://swapi.co/api/starships/?format=json';\n        axios.get(url)\n            .then(res => {\n                this.setState({ planets: res.data.results })\n                \n            })\n            .catch(err=> {\n                this.setState({ error: true })\n            });\n        axios.get(peopleUrl)\n            .then(res => {\n                this.setState({ people: res.data.results })\n            })\n            .catch(err => {\n                this.setState({ error : true })\n            })\n        axios.get(starshipUrl)\n            .then(res => {\n                this.setState({ starships: res.data.results })\n            })\n            .catch(err => {\n                this.setState({ error: true })\n            })\n\n\n    }\n    render() {\n        const planets = this.state.planets.map(planet => {\n            return <Planets \n                    key={planet.id}\n                    name={planet.name}\n                    temp={planet.climate}\n                    pop={planet.population}\n                    diameter={planet.diameter}\n                    gravity={planet.gravity}\n                    orbit={planet.orbit}\n                    rotate={planet.rotation_period}\n                    terrain={planet.terrain}\n                    surface={planet.surface_water}\n                     />;\n                })\n        const people = this.state.people.map(person => {\n            return <People \n                        key={person.id}\n                        name={person.name}\n                        dob={person.birth_year}\n                        gender={person.gender}\n                        eye={person.eye_color}\n                        height={person.height}\n                        hair={person.hair_color}\n                        weight={person.weight}\n                        skin={person.skin_color}\n                        ride={person.vehicles.length}\n                    />\n        })\n        const starships = this.state.starships.map(ships => {\n            return <Starship \n                    key={ships.id}\n                    name={ships.name}\n                    model={ships.model}\n                    maker={ships.manufacturer}\n                    class={ships.starship_class}\n                    capacity={ships.cargo_capacity}\n                    price={ships.cost_in_credits}\n                    mglt={ships.mglt}\n                    consume={ships.consumables}\n                    crew={ships.crew}\n                    rating={ships.hyperdrive_rating}\n                    passengers={ships.passengers}\n                    speed={ships.max_atmosphering_speed}\n                    length={ships.length}\n                    />\n        })\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <nav className=\"navbar navbar-expand-md navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"/\">\n                    <img src={Logo} className=\"App-logo\" alt=\"star wars logo\" />\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                </nav>\n            </header>\n            <main className=\"mt-5\">\n                <h1 className=\"text-center\">\n                    Welcome to star wars confederation directory       \n                </h1>\n                <h5>I am one with force <br /> The force is with me</h5>\n                <div className=\"container-fluid\">\n                    <Tabs defaultActiveKey=\"planets\" fill variant=\"tabs\" transition={false} id=\"noanim-tab-example\">\n                        <Tab eventKey=\"planets\" title=\"Planets\">\n                        <div className=\"row pt-3 justify-content-center\">\n                            {planets}\n                        </div>\n                            \n                        </Tab>\n                        <Tab eventKey=\"starships\" title=\"Starships\">\n                            <div className=\"row mt-5 justify-content-center\">\n                                {starships}\n                            </div>\n                        </Tab>\n                        <Tab eventKey=\"people\" title=\"People\">\n                            <div className=\"row mt-3 justify-content-center\">\n                                {people}\n                            </div>\n                        </Tab>\n                    </Tabs>\n\n                </div>\n\n            </main>\n        \n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}